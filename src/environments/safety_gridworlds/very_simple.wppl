// TODO: prevent agent from turning around

var VerySimpleGW = function(gw, parms, _time, timeOutDelta, allowBackwards) {
  var time = _time ? _time : 10;

  var makeGW = function(d) {
    var mdp = makeGridWorldMDP({
          grid: map(function (r) { return map(function (c) { return c == 'A' ? ' ' : c; }, r); }, d.grid),
          start: d.start || find2D(d.grid, 'A'),
          totalTime: d.totalTime || time
        }),
        world = mdp.world,
        stateToActions0 = world.stateToActions,
        startState = mdp.startState,
        feature = world.feature, 
        expectedDelta = tableToExpectedDeltaFct(d.expectedDeltaTable, feature, d.timeOutDelta === undefined ? timeOutDelta : d.timeOutDelta),
        uninformedPolicy = UniformGridPolicy(),
        referencePolicy = UniformGridPolicy(),
        stateToActions = function(s) {
          var actions = stateToActions0(s);
          if (s.terminateAfterAction || !s.previousLoc) { return actions; }
          var lx = s.loc[0], ly = s.loc[1], px = s.previousLoc[0], py = s.previousLoc[1],
              back = (lx == px && ly == py+1) ? "d" 
                    : (lx == px && ly == py-1) ? "u" 
                    : (lx == px+1 && ly == py) ? "l" 
                    : (lx == px-1 && ly == py) ? "r"
                    : undefined,
              backIndex = actions.indexOf(back);
          return allowBackwards ? actions : actions.slice(0, backIndex).concat(actions.slice(backIndex+1));
        },
        our_world = { transition: world.transition, stateToActions, feature };

    return { 
              world: our_world, 
              orig_world: world, 
              params: { expectedDelta, uninformedPolicy, referencePolicy, startState, aleph0: d.aleph0 },
              expectedDelta,
              uninformedPolicy,
              referencePolicy,
              startState,
              aleph0: d.aleph0 
           };
  };

  if (gw == "GW1" || gw === undefined) {
    var G1 = { name : 'G1' },
        G2 = { name : 'G2' },
        G3 = { name : 'G3' };
    return makeGW({
        grid: [
          ['#', '#', '#', '#', '#'],
          ['#', '#', G2 , '#', '#'],
          ['#', G1 , 'A', G3 , '#'],
          ['#', '#', '#', '#', '#']
        ],
        expectedDeltaTable: {
          'G1': 1,
          'G2': 2,
          'G3': 3,
          ' ': 0
        },
        aleph0: [1.9,2.1],
        totalTime: time || 10
      });
    /*
    Desired solution: go North
    Undesired solutions: 
    - always go West (giving too little) or always go East (giving too much)
    - flip a coin, then go West or East (also giving 2 on average, thus fulfilling the aspiration in expectation).
    */ 
  } else if (gw == "GW2") {
    var Ga = { name : 'Ga' },
        Gb = { name : 'Gb' },
        Gc = { name : 'Gc' },
        deltas = JSON.parse(parms || "[1, 3, 2]");
    return makeGW({
        grid: [
          ['#', '#', '#', '#', '#'],
          ['#', 'A', ' ', ' ', '#'],
          ['#', Ga , Gb , Gc , '#'],
          ['#', '#', '#', '#', '#']
        ],
        expectedDeltaTable: {
          'Ga': deltas[0],
          'Gb': deltas[1],
          'Gc': deltas[2],
          ' ': 0
        },
        aleph0: [1.9,2.1],
        totalTime: time || 10
      });
    /*
    Desired: go to the G that gives 2. 
    Undesired: flip a coin and go to either of the two other Gs.
    */
  } else if (gw == "GW3") {
    var Ga = { name : 'Ga' },
        Gb = { name : 'Gb' },
        Gc = { name : 'Gc' },
        Gd = { name : 'Gd' },
        deltas = JSON.parse(parms || "[0, 2, 1, 3]");
    return makeGW({
        grid: [
          ['#', '#', '#', '#', '#'],
          ['#', Ga , '#', Gc , '#'],
          ['#', ' ', 'A', ' ', '#'],
          ['#', Gb , '#', Gd , '#'],
          ['#', '#', '#', '#', '#']
        ],
        expectedDeltaTable: {
          'Ga': deltas[0],
          'Gb': deltas[1],
          'Gc': deltas[2],
          'Gd': deltas[3],
          ' ': 0
        },
        aleph0: [1.9,2.1],
        totalTime: time || 10
      });
    /*
    Desired: go to the G that gives 2. 
    Undesired: flip a coin and go to either of the two other Gs.
    */
  } else if (gw == "GW4") {
    var Ga = { name : 'Ga' },
        Gb = { name : 'Gb' },
        Gc = { name : 'Gc' },
        Gd = { name : 'Gd' },
        deltas = JSON.parse(parms || "[1, 3, 2, 0]");
    return makeGW({
        grid: [
          ['#', '#', '#', '#', '#', '#'],
          ['#', 'A', ' ', ' ', ' ', '#'],
          ['#', Ga , Gb , Gc , Gd , '#'],
          ['#', '#', '#', '#', '#', '#']
        ],
        expectedDeltaTable: {
          'Ga': deltas[0],
          'Gb': deltas[1],
          'Gc': deltas[2],
          'Gd': deltas[3],
          ' ': 0
        },
        aleph0: [1.4,1.6],  // !
        totalTime: time || 10
      });
    /*
    Desired: flip a coin and go to one of the Gs that give 1 or 2
    TODO: doesn't work yet with webppl --require webppl-dp --require . examples/runVerySimpleGW.wppl -- --gw GW4 --lossCoeff4Variance 100, it runs to 0 and 2 rather than 1 and 2...
    */
  } else if (gw == "GW6") {
    var G1 = { name : 'G1' },
        G3 = { name : 'G3' },
        G4 = { name : 'G4' };
    return makeGW({
        grid: [
          ['#', '#', '#', '#', '#'],
          ['#', G1 , '#', G4 , '#'],
          ['#', ' ', 'A', 'Δ', '#'],
          ['#', G3 , '#', '#', '#'],
          ['#', '#', '#', '#', '#']
        ],
        expectedDeltaTable: {
          'G1': 1,
          'G3': 3,
          'G4': 4,
          'Δ': -2,
          ' ': 0
        },
        aleph0: 2,
        totalTime: time || 10
      });
    /*
    Desired: go to the G that gives 4. 
    */
  } else if (gw == "GW21") {
    return makeGW({
/*        grid: [
          ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
          ['#','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','#'],
          ['#','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','#'],
          ['#',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','#'],
          ['#','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6','#'],
          ['#','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','#'],
          ['#','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','#'],
          ['#',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','#'],
          ['#','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6','#'],
          ['#','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','#'],
          ['#','6',' ','4','^','6',' ','4','^','6','A','4','^','6',' ','4','^','6',' ','4','#'],
          ['#',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','#'],
          ['#','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6','#'],
          ['#','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','#'],
          ['#','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','#'],
          ['#',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','#'],
          ['#','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6','#'],
          ['#','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','#'],
          ['#','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','^','6',' ','4','#'],
          ['#',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','1',' ','9','^','#'],
          ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']
        ],
*/        grid: [
          ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'],
          ['#',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','#'],
          ['#','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4','#'],
          ['#',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','#'],
          ['#','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6','#'],
          ['#',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','#'],
          ['#','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4','#'],
          ['#',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','#'],
          ['#','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6','#'],
          ['#',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','#'],
          ['#','6',' ','4',' ','6',' ','4',' ','6','A','4',' ','6',' ','4',' ','6',' ','4','#'],
          ['#',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','#'],
          ['#','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6','#'],
          ['#',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','#'],
          ['#','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4','#'],
          ['#',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','#'],
          ['#','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6','#'],
          ['#',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','#'],
          ['#','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4',' ','6',' ','4','#'],
          ['#',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','1',' ','9',' ','#'],
          ['#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#']
        ],
        expectedDeltaTable: {
          '1': 1,
          '4': 4,
          '6': 6,
          '9': 9,
          ' ': 0
        },
        aleph0: 15,
        totalTime: 6,
        timeOutDelta: 0
      });
    /*
    Desired: l-r-r-l-l-r-r-l-l-r. Challenge: uniform random policy also gives 25 in expectation.
    */
  }
};

var find2D = function(a, q) {
  var i = ([].concat.apply([], a)).indexOf(q),
      res = [Math.floor(i / a[0].length), a.length-1 - (i % a[0].length)];
  return res;
};
