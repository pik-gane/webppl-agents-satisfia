var VerySimpleGW = function(gw, parms) {

  if (gw == "GW1" || gw === undefined) {
    var G1 = { name : 'G1' },
        G2 = { name : 'G2' },
        G3 = { name : 'G3' };
    return makeGW({
        grid: [
          ['#', '#', '#', '#', '#'],
          ['#', '#', G2 , '#', '#'],
          ['#', G1 , 'A', G3 , '#'],
          ['#', '#', '#', '#', '#']
        ],
        expectedDeltaTable: {
          'G1': 1,
          'G2': 2,
          'G3': 3,
          ' ': 0
        },
        aleph0: 2,
        totalTime: 1
      });
    /*
    Desired solution: go North
    Undesired solutions: 
    - always go West (giving too little) or always go East (giving too much)
    - flip a coin, then go West or East (also giving 2 on average, thus fulfilling the aspiration in expectation).
    */ 
  } else if (gw == "GW2") {
    var Ga = { name : 'Ga' },
        Gb = { name : 'Gb' },
        Gc = { name : 'Gc' },
        deltas = JSON.parse(parms || "[1, 3, 2]");
    return makeGW({
        grid: [
          ['#', '#', '#', '#', '#'],
          ['#', 'A', ' ', ' ', '#'],
          ['#', Ga , Gb , Gc , '#'],
          ['#', '#', '#', '#', '#']
        ],
        expectedDeltaTable: {
          'Ga': deltas[0],
          'Gb': deltas[1],
          'Gc': deltas[2],
          ' ': 0
        },
        aleph0: 2,
        totalTime: 10
      });
    /*
    Desired: go to the G that gives 2. 
    Undesired: flip a coin and go to either of the two other Gs.
    */
  } else if (gw == "GW3") {
    var Ga = { name : 'Ga' },
        Gb = { name : 'Gb' },
        Gc = { name : 'Gc' },
        Gd = { name : 'Gd' },
        deltas = JSON.parse(parms || "[0, 2, 1, 3]");
    return makeGW({
        grid: [
          ['#', '#', '#', '#', '#'],
          ['#', Ga , '#', Gc , '#'],
          ['#', ' ', 'A', ' ', '#'],
          ['#', Gb , '#', Gd , '#'],
          ['#', '#', '#', '#', '#']
        ],
        expectedDeltaTable: {
          'Ga': deltas[0],
          'Gb': deltas[1],
          'Gc': deltas[2],
          'Gd': deltas[3],
          ' ': 0
        },
        aleph0: 2,
        totalTime: 10
      });
    /*
    Desired: go to the G that gives 2. 
    Undesired: flip a coin and go to either of the two other Gs.
    */
  }
};

var find2D = function(a, q) {
  var i = ([].concat.apply([], a)).indexOf(q),
      res = [Math.floor(i / a[0].length), a.length-1 - (i % a[0].length)];
  return res;
};

var makeGW = function(d) {
  var mdp = makeGridWorldMDP({
        grid: map(function (r) { return map(function (c) { return c == 'A' ? ' ' : c; }, r); }, d.grid),
        start: d.start || find2D(d.grid, 'A'),
        totalTime: d.totalTime
      }),
      world = mdp.world,
      startState = mdp.startState,
      f0 = world.feature, 
      feature = function(s) {return extend(f0(s), {test: "TODO: what does this do?"})},
      expectedDelta = tableToExpectedDeltaFct(d.expectedDeltaTable, feature),
      uninformedPolicy = undefined,
      refPolicy = UniformGridPolicy()
      ;
  return { world, expectedDelta, uninformedPolicy, refPolicy, startState, aleph0: d.aleph0 };
};