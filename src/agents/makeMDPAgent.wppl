var hasProperties = function(object, listProperties) {
  assert.ok(_.isObject(object) && _.isArray(listProperties), 'fail hasProperties');
  return _.every(map(
    function(property) {
      return _.has(object, property);
    }, listProperties));
};


var makeMDPAgentOptimal = function(params, world) {
  // *params* should be an object containing *utility*, a utility function, and
  // *alpha*, which regulates the agent's softmax noise.
  map(function(s) {
    assert.ok(params.hasOwnProperty(s), 'makeMDPAgent args');
  }, ['utility', 'alpha']);

  var stateToActions = world.stateToActions;
  var transition = world.transition;
  var utility = params.utility;
  var alpha = params.alpha;

  var act = dp.cache(
    function(state) {
      return Infer({
        method: 'enumerate'
      }, function() {
        var action = uniformDraw(stateToActions(state));
        var eu = expectedUtility(state, action);
        factor(alpha * eu);
        return action;
      });
    });

  var expectedUtility = dp.cache(
    function(state, action) {
      var u = utility(state, action);
      if (state.terminateAfterAction) {
        return u;
      } else {
        return u + expectation(Infer({
          method: 'enumerate'
        }, function() {
          var nextState = transition(state, action);
          var nextAction = sample(act(nextState));
          return expectedUtility(nextState, nextAction);
        }));
      }
    });

  return {
    params,
    expectedUtility,
    act
  };
};


var makeMDPAgentHyperbolic = function(params, world) {
  assert.ok(hasProperties(params, ['utility', 'alpha', 'discount', 'sophisticatedOrNaive']),
            'makeMDPAgentHyperbolic params');

  var stateToActions = world.stateToActions;
  var transition = world.transition;
  var utility = params.utility;

  // we can specify a discount function so that our 'hyperbolic' agent can
  // actually be an exponential discounter (or some other kind of discounter)
  var paramsDiscountFunction = params.discountFunction;

  var discountFunction = (
    paramsDiscountFunction ||
    function(delay) {
      return 1 / (1 + params.discount * delay);
    });

  var isNaive = params.sophisticatedOrNaive == 'naive';

  var act = dp.cache(
    function(state, delay) {
      var delay = delay ? delay : 0; //make sure delay is never 'undefined'

      return Infer({
        method: 'enumerate'
      }, function() {
        var action = uniformDraw(stateToActions(state));
        var eu = expectedUtility(state, action, delay);
        factor(params.alpha * eu);
        return action;
      });
    });

  var expectedUtility = dp.cache(
    function(state, action, delay) {
      var u = discountFunction(delay) * utility(state, action);
      assert.ok(!_.isUndefined(u),
        "utility undefined" + JSON.stringify([state, action, delay, utility(state, action)]));

      if (state.terminateAfterAction) {
        return u;
      } else {
        return u + expectation(Infer({
          method: 'enumerate'
        }, function() {
          var nextState = transition(state, action);
          var perceivedDelay = isNaive ? delay + 1 : 0;
          var nextAction = sample(act(nextState, perceivedDelay));
          return expectedUtility(nextState, nextAction, delay + 1);
        }));
      }
    });

  return {
    params,
    expectedUtility,
    act
  };
};


var isOptimalMDPAgent = function(agentParams) {
  var optimalProperties = function() {
    return !(_.has(agentParams, 'discount') ||
      _.has(agentParams, 'discountFunction') ||
      _.has(agentParams, 'sophisticatedOrNaive'));
  };
  return _.isUndefined(agentParams.optimal) ? optimalProperties() : agentParams.optimal;
};


var makeMDPAgent = function(params, world) {
  return (isOptimalMDPAgent(params) ?
          makeMDPAgentOptimal(params, world) :
          makeMDPAgentHyperbolic(params, world));
};



// SatisfIA agent:

var makeMDPAgentSatisfia = function(params_, world) {

  // extend default parameters and options by supplied ones:
  var params = extend(extend({
    maxLambda: 0.99, // upper bound on local relative aspiration in each step (must be minLambda...1)
    minLambda: 0.01, // lower bound on local relative aspiration in each step (must be 0...maxLambda)
    lossCoeff4variance: 1.0, // weight of variance in loss function, must be >= 0
    lossCoeff4entropy: 0.0, // weight of entropy in loss function, must be >= 0
    lossCoeff4KLdiv: 0.0, // weight of KL divergence in loss function, must be >= 0
    lossCoeff4otherLoss: 0.0, // weight of other loss components specified by otherLossIncrement, must be >= 0
    lossCoeff4random: 0.0, // weight of random noise in loss function, must be >= 0
    onlyUseClosestActions: true, // if true, only use the two actions that are closest to the target aspiration in expectation
    softmaxInvTemp: 1.0, // inverse temperature of softmax mixture of actions, must be > 0
    rescalingDegree: 1.0, // degree (0...1) of aspiration rescaling. (expectation is only preserved if this is 1.0)
  }, params_), { options: extend({
    debug: false
  }, params_.options) });

  // extract parameters, options, and world:
  var stateToActions = world.stateToActions, transition = world.transition;
  var expectedIndicatorIncrement = params.expectedIndicatorIncrement,
      varianceOfIndicatorIncrement = params.varianceOfIndicatorIncrement,
      minLambda = params.minLambda, maxLambda = params.maxLambda,
      uninformedPolicy = params.uninformedPolicy,
      refPolicy = params.refPolicy,
      internalEntropy = params.internalEntropy,
      lossCoeff4variance = params.lossCoeff4variance,
      lossCoeff4entropy = params.lossCoeff4entropy,
      lossCoeff4KLdiv = params.lossCoeff4KLdiv,
      lossCoeff4otherLoss = params.lossCoeff4otherLoss,
      lossCoeff4random = params.lossCoeff4random,
      otherLossIncrement = params.otherLossIncrement,
      onlyUseClosestActions = params.onlyUseClosestActions,
      softmaxInvTemp = params.softmaxInvTemp,
      rescalingDegree = params.rescalingDegree;
  var options = params.options, 
      debug = options.debug;

  // TODO: validate parameter values through assertions

  if (debug) console.log("makeMDPAgentSatisfia using parameters", params);

  var getLocalPolicy = dp.cache(function(state, aleph){
    if (debug) console.log(" getLocalPolicy", state, aleph);
    // The following quantities are potentially intervals: aleph, v, Qstate(a)

    // Use aspiration aleph to set the desired expected return for this state before (!) having chosen an action:
    var v = getAspiration4state(state, aleph),
        actions = stateToActions(state),
        Qstate = function(a) { return getAspiration4action(state, a, v); };
    // Meet point v or midpoint of interval v with a mixture of at most two actions:
    var vMid = _.isArray(v) ? (v[0] + v[1]) / 2 : v,
        QstateMid = _.isArray(v) ? function(a) { var q = Qstate(a); return (q[0] + q[1]) / 2; } : Qstate;

    if (onlyUseClosestActions) {
      
      // Find the two QstateMid table entries, qHi and qLo, that are closest to vMid from above and below: 
      var qHi = minWith(function(a) {return QstateMid(a) >= vMid ? QstateMid(a) : 1e10}, actions)[1],
          qLo = maxWith(function(a) {return QstateMid(a) <= vMid ? QstateMid(a) : -1e10}, actions)[1];
      var actionsHi = filter(function(a) {return QstateMid(a) == qHi}, actions),
          actionsLo = filter(function(a) {return QstateMid(a) == qLo}, actions);
      // Our local policy that guarantees v in expectation is a suitable mixture of these two actions:
      var pHi = relativePosition(qLo, vMid, qHi);
      if (debug) console.log("  qHi, qLo, actionsHi, actionsLo, p", qHi, qLo, actionsHi, actionsLo, pHi);

      // From those actions that meet these values, choose a pair that optimizes 
      // an additional safety criterion encoded in a loss function (see below):
      var lossHi = function(a) { return getLoss(state, a, aleph, vMid, qHi, pHi); },
          lossLo = function(a) { return getLoss(state, a, aleph, vMid, qLo, 1-pHi); },
          aHi = minWith(lossHi, actionsHi)[0],
          aLo = minWith(lossLo, actionsLo)[0];
      return Categorical({ps: [pHi, 1 - pHi], vs: [aHi, aLo]});

    } else {
      
      // Use a softmax mixture of all actions, based on the safety loss.
      // (Note: this will lead to larger entropy and will not behave as consistently under MDP refinements
      // in which an action is resolved into a sequence of sub-actions.)

      // First devide actions into those that are above and below vMid:
      var actionsHi = filter(function(a) {return QstateMid(a) >= vMid}, actions),
          actionsLo = filter(function(a) {return QstateMid(a) <= vMid}, actions);
      // Calculate an approximate relative mixture coefficient p for upper group, to be used for approximating KLdiv:
      var approxQHi = expectation(Infer({ model() { return QstateMid(uniformDraw(actionsHi)); }})),
          approxQLo = expectation(Infer({ model() { return QstateMid(uniformDraw(actionsLo)); }})),
          approxP = clip(1e-10, approxQHi > approxQLo ? (vMid - approxQLo) / (approxQHi - approxQLo) : 0.5, 1-1e-10);
      // Calculate loss for each action:          
      var lossHi = function(a) { return getLoss(state, a, aleph, vMid, approxQHi, approxP); },
          lossLo = function(a) { return getLoss(state, a, aleph, vMid, approxQLo, 1-approxP); };
      // Construct softmax distributions localPolicyHi, localPolicyLo over actionsHi, actionsLo:
      var defaultPolicy = uninformedPolicy ? uninformedPolicy(state) : undefined,
          probabilityFct = function(a) {
            return Math.exp((defaultPolicy ? defaultPolicy.score(a) : 0) - softmaxInvTemp * lossHi(a))
          },
          localPolicyHi = Categorical({vs: actionsHi, ps: map(probabilityFct, actionsHi)}),
          localPolicyLo = Categorical({vs: actionsLo, ps: map(probabilityFct, actionsLo)}); 
      // Calculate the true qHi, qLo, and p from these distributions:
      var qHi = expectation(localPolicyHi, QstateMid),
          qLo = expectation(localPolicyLo, QstateMid),
          pHi = clip(1e-10, relativePosition(qLo, vMid, qHi), 1-1e-10);
      // Finally, mix the two local policies with the true p:
      return Mixture({ps: [pHi, 1 - pHi], dists: [localPolicyHi, localPolicyLo]});

    }
  });

  // Compute upper and lower feasibility bounds for Q and V that are allowed in view of maxLambda and minLambda:

  // Compute the Q and V functions of the classical maximization problem (if maxLambda==1)
  // or of the LRA-based problem (if maxLambda<1):
  var maxFeasibleQ = dp.cache(function(state, action){
    var r = expectedIndicatorIncrement(state, action),
        q = state.terminateAfterAction ? r : r + expectation(Infer({ model() { return maxFeasibleV(transition(state, action)); }}));
    if (debug) console.log("   maxFeasibleQ", state, action, q);
    return q;
  });
  var maxFeasibleV = dp.cache(function(state){
    var actions = stateToActions(state),
        Qstate = function(a) { return maxFeasibleQ(state, a); },
        v = maxLambda == 1 ? maxWith(Qstate, actions)[1] : interpolate(minWith(Qstate, actions)[1], maxLambda, maxWith(Qstate, actions)[1]);
    if (debug) console.log("   maxFeasibleV", state, v);
    return v;
  });

  // Compute the Q and V functions of the corresponding minimization (!) problem (if minLambda==0)
  // or of the LRA-based problem (if minLambda>0):
  var minFeasibleQ = dp.cache(function(state, action){
    var r = expectedIndicatorIncrement(state, action),
        q = state.terminateAfterAction 
            ? r 
            : r + expectation(Infer({ model() { return minFeasibleV(transition(state, action)); }}));
    if (debug) console.log("   minFeasibleQ", state, action, q);
    return q;
  });
  var minFeasibleV = dp.cache(function(state){
    var actions = stateToActions(state),
        Qstate = function(a) { return minFeasibleQ(state, a); },
        v = minLambda == 0 
            ? minWith(Qstate, actions)[1] 
            : interpolate(minWith(Qstate, actions)[1], minLambda, maxWith(Qstate, actions)[1]);
    if (debug) console.log("   minFeasibleV", state, v);
    return v;
  });

  // When using action in state, we can get any expected return in the interval
  // [minFeasibleQ(state, action), maxFeasibleQ(state, action)].
  var getAspiration4action = dp.cache(function(state, action, aleph4state){
    if (debug) console.log("  getAspiration4action", state, action, aleph4state)
    var qLo = minFeasibleQ(state, action),
        qHi = maxFeasibleQ(state, action);
    if (!_.isArray(aleph4state)) {
      // So when having aspiration aleph, we can still fulfill it in expectation if it lies in the interval.
      // Therefore, when using action in state at aspiration aleph, 
      // we set our aspiration when choosing this action to aleph clipped to that interval:
      return clip(qLo, aleph4state, qHi);
    } else {
      // For interval aleph, we choose an interval that guarantees that the resulting mixed interval of all
      // localPolicies that getLocalPolicy() may mix with this action will be within aleph: 
      var alephLo = aleph4state[0], alephHi = aleph4state[1], width = alephHi - alephLo;
      return [Math.max(qLo, Math.min(alephLo, qHi - width)), 
              Math.min(qHi, Math.max(alephHi, qLo + width))];
    }
  });
  // When in state, we can get any expected return in the interval
  // [minFeasibleV(state), maxFeasibleV(state)].
  // So when having aspiration aleph, we can still fulfill it in expectation if it lies in the interval.
  // Therefore, when in state at incoming aspiration aleph, 
  // we adjust our aspiration to aleph clipped to that interval:
  var getAspiration4state = dp.cache(function(state, propagatedAleph){
    var res = clip(minFeasibleV(state), propagatedAleph, maxFeasibleV(state));
    if (debug) console.log("  getAspiration4state", state, propagatedAleph, res);
    return res;
  });

  // Actual Q and V functions of resulting policy (always returning scalars):
  var Q = dp.cache(function(state, action, aleph){
    if (debug) console.log("  Q", state, action, aleph);
    return expectation(Infer({ model() {
      var r = expectedIndicatorIncrement(state, action);
      if (state.terminateAfterAction){
        return r;
      } else {
        var nextState = transition(state, action),
            nextAleph = propagateAspiration(state, aleph, action, r, nextState);
        return r + V(nextState, nextAleph);
      }
    }}));
  });
  var V = dp.cache(function(state, aleph){
    if (debug) console.log("  V", state, aleph);
    return expectation(Infer({ model() { return Q(state, sample(getLocalPolicy(state, aleph)), aleph); }}));
  });

  // Expected squared return, for computing the variance of return:
  var Q2 = dp.cache(function(state, action, aleph){
    if (debug) console.log("  Q2", state, action, aleph);
    return expectation(Infer({ model() {
      var r = expectedIndicatorIncrement(state, action),
          r2 = Math.pow(r,2) + varianceOfIndicatorIncrement(state, action);
      if (state.terminateAfterAction){
        return r2;
      } else {
        var nextState = transition(state, action),
            nextAleph = propagateAspiration(state, aleph, action, r, nextState);
        return r2 + 2*r*V(nextState, nextAleph) + V2(nextState, nextAleph);
      }
    }}));
  });
  var V2 = dp.cache(function(state, aleph){
    if (debug) console.log("  V2", state, aleph);
    return expectation(Infer({ model() { return Q2(state, sample(getLocalPolicy(state, aleph)), aleph); }}));
  });

  var propagateAspiration = dp.cache(function(state, aleph4state, action, indicatorIncrement, nextState){
    if (debug) console.log(" propagateAspiration", state, aleph4state, action, indicatorIncrement, nextState);

    // the propagated aspiration is a mixture of a steadfast and a rescaled part:

    var steadfastAleph4nextState = _.isArray(aleph4state) 
          ? [aleph4state[0] - indicatorIncrement, aleph4state[1] - indicatorIncrement] 
          : aleph4state - indicatorIncrement;

    if (rescalingDegree == 0.0) {
      return steadfastAleph4nextState;
    } else {
      // recover the aspiration that we had after choosing action, before knowing which state we would land in:
      // (Note: We have E(q | action ~ localPolicy) = v) by construction of localPolicy in getLocaPolicy().)
      var q = getAspiration4action(state, action, aleph4state);
      // compute the relative position of that target in the expectation that we had of 
      //    r plus next feasibility interval 
      // before we knew which state we would land in:
      var lam = relativePosition(minFeasibleQ(state, action), q, maxFeasibleQ(state, action)); 
      // (this is between 0 and 1 by definition of q.)
      // rescale the target to the feasibility interval of the state that we landed in:
      var rescaledAleph4nextState = interpolate(minFeasibleV(nextState), lam, maxFeasibleV(nextState));
      // (only this part preserves aspiration in expectation)
      return interpolate(steadfastAleph4nextState, rescalingDegree, rescaledAleph4nextState);      
    }
  });

  // other safety criteria:

  // Shannon entropy 
  // (actually, negative KL divergence relative to uninformedPolicy (e.g., a uniform distribution),
  // to be consistent under action cloning or action refinement):
  var entropy = dp.cache(function(state, aleph) {
    var localPolicy = getLocalPolicy(state, aleph), ref = refPolicy(state);
    return expectation(Infer({ model() { 
      var action = sample(localPolicy);
      return entropyAction(state, Math.exp(ref.score(action)), action, aleph);
    }}));
  });
  var entropyAction = dp.cache(function(state, actionProbability, action, aleph) {
    var res = expectation(Infer({ model() {
          var e = uninformedPolicy(state).score(action) - Math.log(actionProbability)
                  + (internalEntropy ? internalEntropy(state, action) : 0);
          if (state.terminateAfterAction){
            return e;
          } else {
            var nextState = transition(state, action),
                nextAleph = propagateAspiration(state, aleph, action, expectedIndicatorIncrement(state, action), nextState);
            return e + entropy(nextState, nextAleph);
          }
        }}));
    return res;
  });

  // KL divergence relative to refPolicy:
  var KLdiv = dp.cache(function(state, aleph) {
    var localPolicy = getLocalPolicy(state, aleph), ref = refPolicy(state);
    return expectation(Infer({ model() { 
      var action = sample(localPolicy);
      return KLdivAction(state, Math.exp(localPolicy.score(action)), action, aleph);
    }}));
  });
  var KLdivAction = dp.cache(function(state, actionProbability, action, aleph) {
    var ref = refPolicy(state),
        res = expectation(Infer({ model() {
          var d = Math.log(actionProbability) - ref.score(action);
          if (state.terminateAfterAction){
            return d;
          } else {
            var nextState = transition(state, action),
                nextAleph = propagateAspiration(state, aleph, action, expectedIndicatorIncrement(state, action), nextState);
            return d + KLdiv(nextState, nextAleph);
          }
        }}));
    return res;
  });

  // otherLoss:
  var otherLoss = dp.cache(function(state, aleph) {
    var localPolicy = getLocalPolicy(state, aleph);
    return expectation(Infer({ model() { return otherLossAction(state, sample(localPolicy), aleph) }}));
  });
  var otherLossAction = dp.cache(function(state, action, aleph) {
    var ref = refPolicy(state),
        res = expectation(Infer({ model() {
          var d = otherLossIncrement(state, action);
          if (state.terminateAfterAction){
            return d;
          } else {
            var nextState = transition(state, action),
                nextAleph = propagateAspiration(state, aleph, action, expectedIndicatorIncrement(state, action), nextState);
            return d + otherLoss(nextState, nextAleph);
          }
        }}));
    return res;
  });

  var getLoss = dp.cache(function(state, action, aleph, v, q, actionProbability) { 
    var q2 = Q2(state, action, aleph), variance = q2 - Math.pow(q,2);
    return lossCoeff4variance * (variance + Math.pow(q - v,2)) 
            + (lossCoeff4KLdiv > 0 ? lossCoeff4KLdiv * KLdivAction(state, actionProbability, action, aleph) : 0) 
            + (lossCoeff4entropy > 0 ? lossCoeff4entropy * entropyAction(state, actionProbability, action, aleph) : 0)
            + (otherLossIncrement && (lossCoeff4otherLoss > 0) ? lossCoeff4otherLoss * otherLossAction(state, action, aleph) : 0)
            + (lossCoeff4random > 0 ? lossCoeff4random * Math.random() : 0);
  });

  return { 
    minFeasibleQ, maxFeasibleQ, minFeasibleV, maxFeasibleV,
    getLocalPolicy, propagateAspiration, getAspiration4action, getAspiration4state, 
    Q, V, Q2, V2, 
    entropy, entropyAction, KLdiv, KLdivAction, otherLoss, otherLossAction, 
    getLoss
  };
};


// Auxiliary functions:

var asInterval = function(x) { return _.isArray(x) ? x : [x,x]; };

var interpolate = function(x, lam, y) {
  // this is denoted  x : lam : y  in formulas
  if (_.isArray(x) || _.isArray(lam) || _.isArray(y)) {
    // one argument is an interval, so everything becomes an interval:
    var xx = asInterval(x), lamlam = asInterval(lam), yy = asInterval(y);
    return [xx[0] + lamlam[0] * (yy[0] - xx[0]), 
            xx[1] + lamlam[1] * (yy[1] - xx[1])];
  } else {
    return x + lam * (y - x);
  }
}

var relativePosition = function(x, z, y) {
  // this is denoted  x \ z \ y  in formulas
if (_.isArray(x) || _.isArray(z) || _.isArray(y)) {
    // one argument is an interval, so everything becomes an interval:
    var xx = asInterval(x), zz = asInterval(z), yy = asInterval(y);
    return [yy[0] != xx[0] ? (zz[0] - xx[0]) / (yy[0] - xx[0]) : 0.5, 
            yy[1] != xx[1] ? (zz[1] - xx[1]) / (yy[1] - xx[1]) : 0.5];
  } else {
    return y != x ? (z - x) / (y - x) : 0.5;
  }
}

var clip = function(x, z, y) {
  // this is denoted  x[ z ]y  in formulas
if (_.isArray(x) || _.isArray(z) || _.isArray(y)) {
    // one argument is an interval, so everything becomes an interval:
    var xx = asInterval(x), zz = asInterval(z), yy = asInterval(y);
    return [Math.min(Math.max(xx[0], zz[0]), yy[0]),
            Math.min(Math.max(xx[1], zz[1]), yy[1])];
  } else {
    return Math.min(Math.max(x, z), y);
  }
}

var intersect = function(interval1, interval2) {
  // do the two intervals intersect in at least one point?
  return (interval1[0] <= interval2[1]) && (interval2[0] <= interval1[1]);
}
