var simulateMDPAgentOptimal = function(startState, world, agent, outputType) {
  // if outputType is undefined, default to states
  var act = agent.act;
  var transition = world.transition;
  var outputType = outputType ? outputType : 'states';

  var selectOutput = function(state, action) {
    var table = {
      states: state,
      actions: action,
      stateAction: [state, action]
    };
    return table[outputType];
  };

  var sampleSequence = function(state) {
    var action = sample(act(state));
    var nextState = transition(state, action);
    var out = selectOutput(state, action);
    return state.terminateAfterAction ? [out] :
      [out].concat(sampleSequence(nextState));
  };
  return sampleSequence(startState);
};


var simulateMDPAgentHyperbolic = function(startState, world, agent, outputType) {
  var act = agent.act;
  var expectedUtility = agent.expectedUtility;
  var transition = world.transition;
  var outputType = outputType ? outputType : 'states';

  var selectOutput = function(state, action) {
    var table = {
      states: state,
      actions: action,
      stateAction: [state, action]
    };
    return table[outputType];
  };

  var sampleSequence = function(state) {
    var delay = 0;
    var action = sample(act(state, delay));
    var nextState = transition(state, action);
    var out = selectOutput(state, action);
    return state.terminateAfterAction ? [out] : [out].concat(sampleSequence(nextState));
  };
  return sampleSequence(startState);
};

var simulateMDPAgentSatisfia = function(mdp, agent, state, aleph, _options, _t) {
  var options = _options ? _options : {},
      t = _t ? _t : 0,
      aleph4state = asInterval(aleph);
  if (options.verbose || options.debug) console.log(pad(state),"SIMULATE, t",t,"state",prettyState(state),"aleph4state",aleph4state,"...");
  var lp = agent.localPolicy,
      localPolicy = lp(state, aleph4state),
      actionAndAleph = sample(localPolicy),
      action = actionAndAleph[0], 
      aleph4action = actionAndAleph[1],
      ed = mdp.expectedDelta,
      Edel = ed(state, action);
  var stepData = {state, aleph4state, action, aleph4action, Edel};
  if (state.terminateAfterAction) {
    if (options.verbose || options.debug) console.log(pad(state),"SIMULATE, t",t,"state",prettyState(state),"aleph4state",aleph4state,": localPolicy",JSON.stringify(localPolicy.params),"\n"+pad(state),"| action",action,"aleph4action",aleph4action,"Edel",Edel,"(terminal)");
    return { 
      trajectory: [stepData],
      states: [state],
      alephs4state: [aleph4state],
      actions: [action],
      alephs4action: [aleph4action],
      expectedDeltas: [Edel],
      conditionalExpectedTotal: Edel // expected Total conditional on this state trajectory
    };
  } else {
    var w = mdp.world, 
        tr = w.transition,
        nextState = tr(state, action),
        pa = agent.propagateAspiration,
        nextAleph4state = pa(state, action, aleph4action, Edel, nextState);
    if (options.verbose || options.debug) console.log(pad(state),"SIMULATE, t",t,"state",prettyState(state),"aleph4state",aleph4state,": localPolicy",JSON.stringify(localPolicy.params),"\n"+pad(state),"| action",action,"aleph4action",aleph4action,"Edel",Edel,"nextState",prettyState(nextState),"nextAleph4state",nextAleph4state);
    var nextOut = simulateMDPAgentSatisfia(mdp, agent, nextState, nextAleph4state, options, t+1);
    return { 
      trajectory: [stepData].concat(nextOut.trajectory),
      states: [state].concat(nextOut.states),
      alephs4state: [aleph4state].concat(nextOut.alephs4state),
      actions: [action].concat(nextOut.actions),
      alephs4action: [aleph4action].concat(nextOut.alephs4action),
      expectedDeltas: [Edel].concat(nextOut.expectedDeltas),
      conditionalExpectedTotal: Edel + nextOut.conditionalExpectedTotal
    };
  }
};


var simulateMDP = function(startState, world, agent, outputType) {
  var params = agent.params;
  if (isOptimalMDPAgent(params)) {
    return simulateMDPAgentOptimal(startState, world, agent, outputType)
  } else {
    return simulateMDPAgentHyperbolic(startState, world, agent, outputType)
  }
};
