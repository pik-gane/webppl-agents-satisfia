// run via  webppl --require webppl-dp --require . examples/runVerySimpleGW.wppl
                              
var _W = webpplAgents;
var _SU = webpplAgents.satisfia;
var _PP = webpplAgents.pretty;
                              
var env = getEnv(),
    argv = extend({}, env.argv),
    params = extend({}, argv),
    mdp = VerySimpleGW(argv.gw || "GW2", argv.gwparms, argv.time, argv.timeOutDelta, true),
    world = mdp.world,
    transition = world.transition,
    expectedDelta = mdp.expectedDelta,
    uninformedPolicy = mdp.uninformedPolicy,
    referencePolicy = mdp.referencePolicy,
    startState = mdp.startState,
    aleph0 = argv.aleph0 || mdp.aleph0,
    agent = makeMDPAgentSatisfia(extend(params, {
      expectedDelta, uninformedPolicy, referencePolicy, aleph0, argv
    }), world),
    localPolicy = agent.localPolicy, 
    propagateAspiration = agent.propagateAspiration,
    getAspiration4state = agent.getAspiration4state, 
    V = agent.V, 
    V2 = agent.V2,
    behaviorEntropy_state = agent.behaviorEntropy_state, 
    behaviorKLdiv_state = agent.behaviorKLdiv_state,
    messingPotential_state = agent.messingPotential_state,
    cupLoss_state = agent.cupLoss_state;

var t0 =  _SU.time();
// verify meeting of expectations:
console.log("\nV", V(startState, aleph0),"\n");
console.log("\Variance", V2(startState, aleph0)-V(startState, aleph0)*V(startState, aleph0),"\n");
console.log("\nTIME:", _SU.time() - t0, "ms\n");
console.log("\ncupLoss", cupLoss_state(mdp.startState, aleph0),"\n");
console.log("\nentropy", behaviorEntropy_state(mdp.startState, aleph0),"\n");
console.log("\nKLdiv", behaviorKLdiv_state(mdp.startState, aleph0),"\n");
console.log("\nmessingPotential", messingPotential_state(mdp.startState, aleph0),"\n");

var gd = agent.getData, agentData = gd();

// estimate distribution of trajectories:

var sym = simulateMDPAgentSatisfia(mdp, agent, mdp.startState, aleph0, argv); // simulate(mdp.startState, aleph0);

console.log(sym.trajectory);

var trajDist = Infer({ model() {
  return sym.trajectory;
}}).getDist();

console.log("\nDATA FOR REGRESSION TESTS: \ntrajDist");
var regressionTestData = _PP.trajDist2simpleJSON(trajDist);
console.log(JSON.stringify(regressionTestData));
console.log("END OF DATA FOR REGRESSION TESTS\n");

var trajData = trajDist2TrajData(trajDist, agent);

//console.log("trajData", trajData);

var locActionData = _SU.trajDist2LocActionData(trajDist, trajData);
console.log("locActionData", locActionData);

console.log("\nminAdmissibleQ:");
console.log(stateActionFct2ASCII(agent.minAdmissibleQ, agentData.stateActionPairs));
console.log("\nmaxAdmissibleQ:");
console.log(stateActionFct2ASCII(agent.maxAdmissibleQ, agentData.stateActionPairs));

console.log("\nQ:");
console.log(_PP.locActionData2ASCII(locActionData.Q));
console.log("\ncupLoss:");
console.log(_PP.locActionData2ASCII(locActionData.cupLoss));
console.log("\nmessingPotential:");
console.log(_PP.locActionData2ASCII(locActionData.messingPotential));
console.log("\ncombinedLoss:");
console.log(_PP.locActionData2ASCII(locActionData.combinedLoss));

console.log("\naction frequencies:");
console.log(_PP.locActionData2ASCII(locActionData.actionFrequency));


var tr=sym.states;
console.log(tr);
console.log(tr[0].loc);
console.log(tr[1].loc);

_W.draw(world, {trajectory:tr});

