// fold: Restaurant constants, tableToUtilityFunction

var ___ = ' ';
var DN = { name : 'Donut N' };
var DS = { name : 'Donut S' };
var V = { name : 'Veg' };
var N = { name : 'Noodle' };

var tableToUtilityFunction = function(table, feature) {
  return function(state, action) {
    var stateFeatureName = feature(state).name;
    return stateFeatureName ? table[stateFeatureName] : table.timeCost;
  };
};
// 

// Construct world 

var grid = [
  ['#', '#', '#', '#',  V , '#'],
  ['#', '#', '#', ___, ___, ___],
  ['#', '#', DN , ___, '#', ___],
  ['#', '#', '#', ___, '#', ___],
  ['#', '#', '#', ___, ___, ___],
  ['#', '#', '#', ___, '#',  N ],
  [___, ___, ___, ___, '#', '#'],
  [DS , '#', '#', ___, '#', '#']
];

var mdp = makeGridWorldMDP({
  grid,
  start: [3, 1],
  totalTime: 9
});

var world = mdp.world;
var transition = world.transition;
var stateToActions = world.stateToActions;


// Construct utility function

var utilityTable = {
  'Donut S': 1,
  'Donut N': 1,
  'Veg': 3,
  'Noodle': 2,
  'timeCost': -0.1
};

var indicatorIncrement = tableToUtilityFunction(utilityTable, world.feature);


// Auxiliary functions:

var interpolate = function(x, lam, y) {
  // this is denoted  x : lam : y  in formulas
  return x + lam * (y - x);
}
var relativePosition = function(x, z, y) {
  // this is denoted  x \ z \ y  in formulas
  return (z - x) / (y - x);
}
var clip = function(x, z, y) {
  // this is denoted  x[ z ]y  in formulas
  return Math.min(Math.max(x, z), y);
}

// Construct agent

var makeAgent = function(indicatorIncrement) {
  // Note: I renamed some things so that they no longer sound as if larger is better:
  // reward -> r
  // utility -> indicatorIncrement

  var act = dp.cache(function(state, aleph){
    // We can get aleph in expectation if it doesn't lie outside the feasible range.
    // So the following value will be our actual target for the expected return, 
    // before having chosen action:
    var v = clip(minFeasibleV(state), aleph, maxFeasibleV(state));
    // Now we find two actions, aHi and aLo, whose Q values are closest to q from above and below: 
    var actions = stateToActions(state),
        Qstate = function(a) { return Q(state, a, aleph); },
        aHi = minWith(function(a) {return Qstate(a) >= v ? Qstate(a) : 1e10}, actions)[0],
        aLo = maxWith(function(a) {return Qstate(a) <= v ? Qstate(a) : -1e10}, actions)[0],
        qHi = Qstate(aHi),
        qLo = Qstate(aLo);
    // Our local policy that guarantees q in expectation is a suitable mixture of these two actions:
    var p = qHi > qLo ? (aleph - qLo) / (qHi - qLo) : 0.5,
        localPolicy = Categorical({ps: [p, 1-p], vs: [aHi, aLo]});
    return localPolicy;
    // TODO later: since there are often many actions a with Q(s,a)=q, 
    // we should use some further criteria to select between them,
    // e.g. the mixture that results in the smallest variance in return (as in Phine's code).
  });

  // Note: we do no longer need the former function expectedUtility, so I removed it.

  // Compute the upper and lower bounds for Q and V that can be achieved:

  // Compute the Q and V functions of the classical maximization problem:
  var maxFeasibleQ = dp.cache(function(state, action){
    var r = indicatorIncrement(state, action);
    if (state.terminateAfterAction){
      return r;
    } else {
      return r + expectation(Infer({ model() {
        return maxFeasibleV(transition(state, action));
      }}));
    }
  });
  var maxFeasibleV = dp.cache(function(state){
    return maxWith(function(a) { return maxFeasibleQ(state, a); }, stateToActions(state))[1];
  });

  // Compute the Q and V functions of the corresponding minimization (!) problem:
  var minFeasibleQ = dp.cache(function(state, action){
    var r = indicatorIncrement(state, action);
    if (state.terminateAfterAction){
      return r;
    } else {
      return r + expectation(Infer({ model() {
        return minFeasibleV(transition(state, action));
      }}));
    }
  });
  var minFeasibleV = dp.cache(function(state){
    return minWith(function(a) { return minFeasibleQ(state, a); }, stateToActions(state))[1];
  });

  // When using action in state, we can get any expected return in the interval
  // [minFeasibleQ(state, action), maxFeasibleQ(state, action)].
  // So when having aspiration aleph, we can still fulfill it in expectation if it lies in the interval.
  // Therefore, when using action in state at aspiration aleph, we expect to get an expected return
  // that equals aleph clipped to that interval:
  var Q = dp.cache(function(state, action, aleph) {
    return clip(minFeasibleQ(state, action), aleph, maxFeasibleQ(state, action));
  });
  // Note: after I have written the comment above this function, Codepilot has written the actual code for it!

  var propagateAspiration = dp.cache(function(state, aleph, action, reward, nextState) {

    // recover the adjusted target value that we had after choosing action:
    // (Note: We have E(q | action ~ localPolicy) = v) by construction of localPolicy in act().)
    var q = Q(state, action, aleph);

    // compute the relative position of that target in the expectation that we had of 
    //    reward plus next feasibility interval 
    // before we knew which state we would land in:
    var lam = relativePosition(minFeasibleQ(state, action), q, maxFeasibleQ(state, action)); 

    // rescale the target to the feasibility interval of the state that we landed in:
    var nextAleph = interpolate(minFeasibleV(nextState), lam, maxFeasibleV(nextState));

    return nextAleph;
  });

  return { act: act, propagateAspiration: propagateAspiration };
};

var agent = makeAgent(indicatorIncrement);
var act = agent.act;
var propagate_aspiration = agent.propagateAspiration;

// Generate and draw a trajectory


var simulate = function(state, aleph) {
  var localPolicy = act(state, aleph);
  var action = sample(localPolicy);
  var r = indicatorIncrement(state, action);
  var nextState = transition(state, action);
  var nextAleph = propagate_aspiration(state, aleph, action, r, nextState);
  var sa = [state, action];
  if (state.terminateAfterAction) {
    return { traj: [sa], return: r };
  } else {
    var nextOut = simulate(nextState, nextAleph);
    return { traj: [sa].concat(nextOut.traj), return: r + nextOut.return };
  }
};


// set our target aspitation:

var aleph0 = 1.5;


// simulate a single trajectory:

var out = simulate(mdp.startState, aleph0);
var trajectory = out.traj;
console.log(out.return);
console.log(trajectory);

viz.gridworld(world, { trajectory: map(first, trajectory) })


// calculate expected return by using the inbuilt expectation function:

var expectedReturn = expectation(Infer({ model() {
  return simulate(mdp.startState, aleph0).return;
}}));
console.log("in expectation, we expected return", aleph0, "and actually get", expectedReturn);
